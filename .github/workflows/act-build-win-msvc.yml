# 2023-11-25 19:00
# old: 2023-06-05 00:10
name: RustPlayer - win - msvc

on:
  workflow_dispatch:
    inputs:
      upload-LLVM-arc:
        type: boolean
        default: false
      upload-vcpkg-arc:
        type: boolean
        default: false
  
#  schedule:
#    - cron: "0 0 * * *"
#  push:
#    paths-ignore: 
#      - 'README.md'
#      - '.github/**'
#    branches: [ master ]
#    
#  pull_request:
#    paths-ignore: 
#      - 'README.md'
#      - '.github/**'
#    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  DEBUG_LS: yes
  #VCPKG_COMMIT_ID: 94ce0dab56f4d8ba6bd631ba59ed682b02d45c46
  #VCPKG_COMMIT_ID: 69efe9cc2df0015f0bb2d37d55acde4a75c9a25b
  VCPKG_COMMIT_ID: "662dbb50e63af15baa2909b7eac5b1b87e86a0aa"
  TAG_NAME: win-msvc
  VERSION: "1.1.1"
  LLVM_VERSION: "15.0.6"
  ACTIONS_RUNTIME_TOKEN: ""
  ACTIONS_CACHE_URL: ""
  VCPKG_BINARY_SOURCES: ""
  LLVM_PATH: "C:\\Program\ Files\\LLVM"
  LIBCLANG_PATH: "C:\\Program\ Files\\LLVM\\bin"
  LLVM_CONFIG_PATH: "C:\\Program\ Files\\LLVM\\bin\\llvm-config.bat"
  #LIBCLANG_PATH: "C:\Program Files\LLVM\bin"
  #LLVM_CONFIG_PATH: ""
  # clear;files
  UPLOAD_LLVM_ARC: "${{ inputs.upload-LLVM-arc }}"
  UPLOAD_VCPKG_ARC: "${{ inputs.upload-VCPKG-arc }}"
  
jobs:
  build-on-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
            - { target: x86_64-pc-windows-msvc      , os: windows-2022 }
#            - { os: windows-2022, target: x86_64-pc-windows-msvc, sys: msvc, artifact_name: target/release/RustPlayer.exe , asset_name: RustPlayer-windows-x86_64.exe }
          # - { os: windows-2022, sys: mingw64, env: x86_64, artifact_name: target/release/RustPlayer.exe , asset_name: RustPlayer-windows-x86_64.exe }
          # - { os: windows-2022, sys: mingw32, env: i686, artifact_name: target/release/RustPlayer.exe , asset_name: RustPlayer-windows-x86.exe }
          # - { os: windows-2022, sys: ucrt64,  env: ucrt-x86_64 }  # Experimental!
          # - { os: windows-2022, sys: clang64, env: clang-x86_64 } # Experimental!
    # defaults:
    #   run:
    #     shell: msys2 {0}
    steps:
    - name: Checkout
      uses: deep-soft/checkout@v3

    - name: Install LLVM and Clang
      uses: deep-soft/install-llvm-action@v1
      with:
        version: ${{ env.LLVM_VERSION }}

    - name: Create LLVM archive
      if: env.UPLOAD_LLVM_ARC == 'true'
      continue-on-error: true
      shell: bash
      run: |
        staging="LLVM-${{ matrix.os }}-${{ matrix.target }}-${{ env.LLVM_VERSION }}"
        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          7z a "$staging.zip" "${{ env.LLVM_PATH }}" > nul
          echo "LLVM_ARC=$staging.zip" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name:"
            ls -l "$staging.zip"
          fi
        else
          touch "$staging.tar.xz"
          #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
          tar --exclude=*.tar* --exclude=target/*  -cv "${{ env.LLVM_PATH }}" | xz -9 > "$staging.tar.xz"
          echo "LLVM_ARC=$staging.tar.xz" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
        fi
        #ls -l ${{ env.LLVM_ARC }} 
    - name: Publish LLVM archive
      if: env.UPLOAD_LLVM_ARC == 'true'
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ${{ env.LLVM_ARC }}
    - name: Install Rust toolchain
      uses: deep-soft/rust-toolchain@master
      with:
        toolchain: stable
        target: ${{ matrix.target }}
#          override: true
        components: cargo rustc rust-std rustfmt

    - uses: deep-soft/rust-cache@v2
      with:
        prefix-key: ${{ matrix.os }}

    - name: Restore from cache and install vcpkg
      uses: deep-soft/run-vcpkg@v10
      with:
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      shell: bash
      run: |
        $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static ffmpeg:x64-windows-static ffmpeg:x64-windows-static-md
        $VCPKG_ROOT/vcpkg install ffmpeg:x64-windows-static-md

    - name: Create vcpkg archive
      if: env.UPLOAD_VCPKG_ARC == 'true'
      continue-on-error: true
      shell: bash
      run: |
        staging="vcpkg-${{ matrix.os }}-${{ matrix.target }}-${{ env.VCPKG_COMMIT_ID }}"
        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          7z a "$staging.zip" "*" -x!target/* -x!"${{ env.LLVM_ARC }}" > nul
          echo "VCPKG_ARC=$staging.zip" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name:"
            ls -l "$staging.zip"
          fi
        else
          touch "$staging.tar.xz"
          #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
          tar --exclude=*.tar* --exclude=target/* --exclude="${{ env.LLVM_ARC }}" -cv . | xz -9 > "$staging.tar.xz"
          echo "VCPKG_ARC=$staging.tar.xz" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi
        fi
        #ls -l ${{ env.VCPKG_ARC }} 

    - name: Publish vcpkg archive
      if: env.UPLOAD_VCPKG_ARC == 'true'
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ${{ env.VCPKG_ARC }}

    - name: Build RustPlayer
      shell: bash
      run: |
        export RUSTFLAGS=-Ctarget-feature=+crt-static
        echo "@echo off" > "${{ env.LLVM_CONFIG_PATH }}"
        cargo build --target ${{ matrix.target }} --release

    - name: Rename rustplayer
      shell: bash
      run: |
        mv target/release/rustplayer.exe target/release/rustplayer-${{ env.VERSION }}.exe
        mkdir ./SignOutput
        cp target/release/rustplayer-${{ env.VERSION }}.exe ./SignOutput/rustplayer-${{ env.VERSION }}-signed.exe

    - name: Sign executable file
      uses: deep-soft/code-sign-action@master
      with:
        certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
        password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
        certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
        # certificatename: '${{ secrets.WINDOWS_PFX_NAME }}'
        folder: './SignOutput/'
        recursive: false

    - name: Publish Release
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
          target/release/rustplayer*.exe
          ./SignOutput/rustplayer-*.exe
          ${{ env.ASSET_SRC }}
