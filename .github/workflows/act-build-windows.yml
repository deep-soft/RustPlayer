# 2023-11-24 00:20
#
#
name: act-build-windows

on:
  workflow_dispatch:
    inputs:
      VCPKG_COMMIT_ID:
        description: VCPKG_COMMIT_ID (06c79a9afa6f99f02f44d20df9e0848b2a56bf1b or 8eb57355a4ffb410a2e94c07b4dca2dffbee8e50)
        default: "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"
        required: true
      RUST_TOOLCHAIN:
        description: RUST_TOOLCHAIN (1.73 or stable)
        default: "1.73"
        required: true
      SED_STUFF:
        description: SED_STUFF
        type: boolean
        default: false
        required: true
      SED_STUFF_PARAMS:
        description: SED_STUFF_PARAMS
        default: "src/ui/fs.rs"
        required: true
      CREATE_ARC_ALL:
        description: Create tar.xz with all files
        type: boolean
        default: false
        required: true
      DEBUG_MODE_1:
        description: DEBUG_MODE_1
        default: "N"
        required: true
      DEBUG_MODE_2:
        description: DEBUG_MODE_2
        default: "N"
        required: true

#  schedule:
#    - cron: "0 0 * * *"
#  push:
#    paths-ignore: 
#      - 'README.md'
#      - '.github/**'
#    branches: [ master ]
#    
#  pull_request:
#    paths-ignore: 
#      - 'README.md'
#      - '.github/**'
#    branches: [ master ]

env:
  RUST_TOOLCHAIN: 1.73
  #RUST_TOOLCHAIN: stable
  CARGO_TERM_COLOR: always
  #VCPKG_COMMIT_ID: 06c79a9afa6f99f02f44d20df9e0848b2a56bf1b
  #VCPKG_COMMIT_ID: "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"
  VCPKG_COMMIT_ID: "06c79a9afa6f99f02f44d20df9e0848b2a56bf1b"
  TAG_NAME:      "win"
  TAG_VERSION:   "rustplayer-v1.1.0"
  TAG_BUILD:     "-b"
  TAG_REF:       "0000000"
  PROG_NAME:     "rustplayer"
  PROG_VERSION:  "v1.1.0"
  VERSION:       "1.0.0"
  GUI:           "win-con"

jobs:
  build-on-windows:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: windows-2022 }
        include:
          - { sys: mingw64, env: x86_64, target: x86_64-pc-windows-msvc, os: windows-2022 }
          # - { os: windows-2022, target: x86_64-pc-windows-msvc, sys: mingw64, env: x86_64, artifact_name: 'target/release/${{ env.PROG_NAME }}.exe', asset_name: '${{ env.PROG_NAME }}-${{ env.target }}.exe' }
          # - { sys: mingw32, env: i686  , artifact_name: 'target/release/${{ env.PROG_NAME }}.exe', asset_name: '${{ env.PROG_NAME }}-windows-x86.exe'    }
          # - { sys: ucrt64,  env: ucrt-x86_64 }  # Experimental!
          # - { sys: clang64, env: clang-x86_64 } # Experimental!
    # defaults:
    #   run:
    #     shell: msys2 {0}
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL',     process.env.ACTIONS_CACHE_URL     || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: deep-soft/checkout@v3

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.2
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"
## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d-%H%m)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

      - name: Create Create source archive
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'tar.xz'
          filename: "${{ env.PROG_NAME }}-src-${{ env.VERSION }}-${{ matrix.job.target }}-${{ env.GUI }}-${{ matrix.job.os }}"
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
          env_variable: ASSET_SRC
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

#      - name: install toolchain
#        run: |
#          rustup toolchain install stable --profile minimal
#
#      - uses: Swatinem/rust-cache@v2

      - name: set RUST_TOOLCHAIN from inputs
        shell: bash
        run: |
          if [[ "${{ inputs.RUST_TOOLCHAIN }}" != "" ]]; then
            echo "RUST_TOOLCHAIN=${{ inputs.RUST_TOOLCHAIN }}" >> $GITHUB_ENV
          fi

      - name: Install Rust toolchain
        continue-on-error: true
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          #  Rustup toolchain specifier e.g. stable, nightly, 1.42.0
          #  the default is to match the @rev as described above. When passing an explicit toolchain as an input instead of @rev, you'll want to use "rust-toolchain@master" as the revision of the action.
          targets: ${{ matrix.job.target }}
          #  Comma-separated string of additional targets
          components: ''
          #  Comma-separated string of additional components to install e.g. clippy, rustfmt

      - uses: deep-soft/rust-cache@v2
        continue-on-error: true
        with:
          prefix-key: ${{ matrix.job.os }}

#      - name: setup vcpkg (do not install any package)
#        uses: lukka/run-vcpkg@v10
#        with:
#          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: set VCPKG_COMMIT_ID from inputs
        shell: bash
        run: |
          if [[ "${{ inputs.VCPKG_COMMIT_ID }}" != "" ]]; then
            echo "VCPKG_COMMIT_ID=${{ inputs.VCPKG_COMMIT_ID }}" >> $GITHUB_ENV
          fi

      - name: Setup vcpkg with Github Actions binary cache
        continue-on-error: true
        uses: deep-soft/run-vcpkg@v11
        with:
          #vcpkgDirectory: C:\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: sed-stuff
        if: ${{ inputs.SED_STUFF }}
        continue-on-error: true
        shell: bash
        env:
          DEBUG_MODE_1: ${{ inputs.DEBUG_MODE_1 }}
          DEBUG_MODE_2: ${{ inputs.DEBUG_MODE_2 }}
        run: |
          bash bins/sed-stuff.sh ${{ inputs.SED_STUFF_PARAMS }}

      - name: Install vcpkg dependencies and build
        continue-on-error: true
        shell: bash
        run: |
          echo "VCPKG_ROOT=[$VCPKG_ROOT]"
          # $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
          #$VCPKG_ROOT/vcpkg install --triplet x64-windows-static-md --x-install-root="$VCPKG_ROOT/installed"
          #cargo build --release
          $VCPKG_ROOT/vcpkg install ffmpeg:x64-windows-static-md
          cargo build --release

      - name: Create Create source archive
        if: ${{ inputs.CREATE_ARC_ALL }}
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'tar.xz'
          filename: "${{ env.PROG_NAME }}-src1-${{ env.VERSION }}-${{ matrix.job.target }}-${{ env.GUI }}-${{ matrix.job.os }}-ALL"
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
          env_variable: ASSET_SRC1
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: rename
        continue-on-error: true
        shell: bash
        run: |
          mkdir './SignOutput'
          mv target/release/${{ env.PROG_NAME }}.exe target/release/${{ env.PROG_NAME }}-${{ env.VERSION }}.exe
          cp ./target/release/${{ env.PROG_NAME }}-${{ env.VERSION }}.exe ./SignOutput/${{ env.PROG_NAME }}-${{ env.VERSION }}.exe

      - name: Sign executable files
        continue-on-error: true
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.CERTNAME }}'
          folder: './SignOutput'
          recursive: true

      - name: SHA256 for executable file
        continue-on-error: true
        uses: deep-soft/sha-checksums@v1
        with:
          type: 'sha256'
          filename: '${{ env.PROG_NAME }}-${{ env.VERSION }}.exe.sha256'
          directory: './SignOutput'
          path: '${{ env.PROG_NAME }}-${{ env.VERSION }}.exe'
          ignore_git: true
          # output env.SHA_SUMS

      - name: Publish Release latest
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          prerelease: true
          tag_name: latest
          files: |
            ./SignOutput/${{ env.PROG_NAME }}-${{ env.VERSION }}.exe
            ${{ env.SHA_SUMS }}

      - name: Publish Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}-${{ env.PROG_VERSION }}
          ##./SignOutput/${{ env.PROG_NAME }}-*.exe
          ## ./SignOutput/${{ env.PROG_NAME }}-${{ env.VERSION }}-${{ matrix.job.target }}-${{ matrix.job.os }}.exe.sha256
          files: |
            ./SignOutput/${{ env.PROG_NAME }}-${{ env.VERSION }}.exe
            ${{ env.SHA_SUMS }}
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}
